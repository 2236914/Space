-- 1. Base Tables
CREATE TABLE students (
    srcode INT PRIMARY KEY,
    firstname VARCHAR(100) NOT NULL,
    lastname VARCHAR(100) NOT NULL,
    phonenum CHAR(11) NOT NULL UNIQUE CHECK (phonenum LIKE '09%' AND LENGTH(phonenum) = 11),
    email VARCHAR(150) UNIQUE NOT NULL,
    password CHAR(64) NOT NULL,
    department VARCHAR(100),
    year INT,
    section VARCHAR(10),
    course VARCHAR(100),
    address TEXT,
    personality TEXT,
    status ENUM('active', 'deactivated', 'suspended') DEFAULT 'active',
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    username VARCHAR(150) UNIQUE
);

CREATE TABLE therapists (
    therapist_id VARCHAR(10) PRIMARY KEY,
    firstname VARCHAR(100) NOT NULL,
    lastname VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password CHAR(64) NOT NULL,
    specialization VARCHAR(255),
    license_number VARCHAR(50) UNIQUE NOT NULL,
    contact_number CHAR(11) UNIQUE NOT NULL CHECK (contact_number LIKE '09%' AND LENGTH(contact_number) = 11),
    dob DATE NOT NULL,
    age INT GENERATED ALWAYS AS (YEAR(CURDATE()) - YEAR(dob)) VIRTUAL,
    status ENUM('active', 'inactive', 'suspended') DEFAULT 'active',
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    username VARCHAR(150) UNIQUE
);

CREATE TABLE admins (
    admin_id VARCHAR(10) PRIMARY KEY,
    firstname VARCHAR(100) NOT NULL,
    lastname VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    password CHAR(64) NOT NULL,
    contact_number CHAR(11) UNIQUE NOT NULL CHECK (contact_number LIKE '09%' AND LENGTH(contact_number) = 11),
    role ENUM('superadmin', 'moderator') DEFAULT 'moderator',
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Session Logging Tables
CREATE TABLE session_logs (
    session_id INT AUTO_INCREMENT PRIMARY KEY,
    srcode INT,
    login_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    logout_time TIMESTAMP NULL,
    ip_address VARCHAR(45),
    session_status ENUM('active', 'inactive') DEFAULT 'active',
    FOREIGN KEY (srcode) REFERENCES students(srcode) ON DELETE CASCADE
);

CREATE TABLE admin_session_logs (
    session_id INT AUTO_INCREMENT PRIMARY KEY,
    admin_id VARCHAR(10),
    login_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    logout_time TIMESTAMP NULL,
    ip_address VARCHAR(45),
    session_status ENUM('active', 'inactive') DEFAULT 'active',
    FOREIGN KEY (admin_id) REFERENCES admins(admin_id) ON DELETE CASCADE
);

CREATE TABLE therapist_session_logs (
    session_id INT AUTO_INCREMENT PRIMARY KEY,
    therapist_id VARCHAR(10),
    login_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    logout_time TIMESTAMP NULL,
    ip_address VARCHAR(45),
    session_status ENUM('active', 'inactive') DEFAULT 'active',
    FOREIGN KEY (therapist_id) REFERENCES therapists(therapist_id) ON DELETE CASCADE
);

-- Activity Logging Tables
CREATE TABLE activity_logs (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    srcode INT NOT NULL,
    action VARCHAR(255) NOT NULL,
    action_details TEXT,
    ip_address VARCHAR(45),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (srcode) REFERENCES students(srcode) ON DELETE CASCADE
);

CREATE TABLE admin_activity_logs (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    admin_id VARCHAR(10),
    action VARCHAR(255) NOT NULL,
    action_details TEXT,
    ip_address VARCHAR(45),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (admin_id) REFERENCES admins(admin_id) ON DELETE CASCADE
);

CREATE TABLE therapist_activity_logs (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    therapist_id VARCHAR(10),
    action VARCHAR(255) NOT NULL,
    action_details TEXT,
    ip_address VARCHAR(45),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (therapist_id) REFERENCES therapists(therapist_id) ON DELETE CASCADE
);

-- 3. Feature Tables
CREATE TABLE moodlog (
    moodlog_id VARCHAR(10) PRIMARY KEY,
    srcode INT NOT NULL,
    selected_emoji VARCHAR(50) NOT NULL,
    mood_name VARCHAR(100) NOT NULL,
    description TEXT,
    log_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (srcode) REFERENCES students(srcode) ON DELETE CASCADE
);

CREATE TABLE mood_streaks (
    streak_id INT AUTO_INCREMENT PRIMARY KEY,
    srcode INT NOT NULL,
    current_streak INT DEFAULT 0,
    FOREIGN KEY (srcode) REFERENCES students(srcode) ON DELETE CASCADE
);

CREATE TABLE notifications (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id VARCHAR(50) NOT NULL,
    type VARCHAR(50) NOT NULL,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    icon VARCHAR(50) NOT NULL,
    color_class VARCHAR(50) NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_user_created (user_id, created_at)
);

-- Move these up with other feature tables
CREATE TABLE quotes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    content TEXT NOT NULL,
    author VARCHAR(255) NOT NULL,
    category VARCHAR(100) DEFAULT 'mental health',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE journal_entries (
    entry_id INT AUTO_INCREMENT PRIMARY KEY,
    srcode INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    mood VARCHAR(50) NOT NULL,
    entry_date DATE NOT NULL,  -- Added specific date field
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (srcode) REFERENCES students(srcode) ON DELETE CASCADE
); 

CREATE TABLE profile_pictures (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id VARCHAR(50) NOT NULL,  -- Can be srcode, therapist_id, or admin_id
    user_type ENUM('student', 'therapist', 'admin') NOT NULL,
    image_data MEDIUMBLOB NOT NULL,
    mime_type VARCHAR(100) NOT NULL,
    status ENUM('active', 'inactive') DEFAULT 'active',
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY unique_user_picture (user_id, user_type),
    INDEX idx_user (user_id, user_type),
    INDEX idx_status (status)
);




-- 4. Social Features
CREATE TABLE posts (
    post_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(150) NOT NULL,
    content TEXT NOT NULL,
    image_file MEDIUMBLOB,
    image_name VARCHAR(255),
    post_type ENUM('student', 'therapist') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    status ENUM('active', 'hidden', 'deleted') DEFAULT 'active',
    INDEX idx_username_type (username, post_type)
);

CREATE TABLE comments (
    comment_id INT PRIMARY KEY AUTO_INCREMENT,
    post_id INT NOT NULL,
    username VARCHAR(150) NOT NULL,
    comment_text TEXT NOT NULL,
    commenter_type ENUM('student', 'therapist') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    status ENUM('active', 'hidden', 'deleted') DEFAULT 'active',
    FOREIGN KEY (post_id) REFERENCES posts(post_id) ON DELETE CASCADE,
    INDEX idx_post_user (post_id, username)
);

CREATE TABLE likes (
    like_id INT PRIMARY KEY AUTO_INCREMENT,
    post_id INT NOT NULL,
    username VARCHAR(150) NOT NULL,
    liker_type ENUM('student', 'therapist') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(post_id) ON DELETE CASCADE,
    UNIQUE KEY unique_like (post_id, username, liker_type)
);

CREATE TABLE reports (
    report_id INT PRIMARY KEY AUTO_INCREMENT,
    reporter_username VARCHAR(150) NOT NULL,
    reporter_type ENUM('student', 'therapist') NOT NULL,
    reported_type ENUM('post', 'user') NOT NULL,
    reported_id VARCHAR(150) NOT NULL,
    report_type ENUM(
        'inappropriate',      -- From both post and user reports
        'harassment',        -- From both post and user reports
        'spam',             -- From both post and user reports
        'hate_speech',      -- From post reports
        'violence',         -- From post reports
        'fake',            -- From user reports (Fake Account)
        'other'            -- From both post and user reports
    ) NOT NULL,
    reason TEXT,            -- For storing otherReason when type is 'other'
    status ENUM('pending', 'reviewed', 'resolved') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_reporter (reporter_username, reporter_type),
    INDEX idx_reported (reported_type, reported_id),
    INDEX idx_status (status),                    -- Add this for status filtering
    INDEX idx_report_type (report_type),          -- Add this for report type filtering
    INDEX idx_created_at (created_at)             -- Add this for date filtering
);

-- 5. Support & Applications
CREATE TABLE support_messages (
    id INT PRIMARY KEY AUTO_INCREMENT,
    srcode INT NOT NULL,
    email VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    attachment_data LONGBLOB,
    attachment_name VARCHAR(255),
    attachment_type VARCHAR(100),
    status ENUM('pending', 'in_progress', 'resolved') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (srcode) REFERENCES students(srcode) ON DELETE CASCADE
);
ALTER TABLE therapist_support_messages
MODIFY therapist_id VARCHAR(10) NOT NULL,
MODIFY email VARCHAR(255) NOT NULL,
MODIFY message TEXT NOT NULL,
MODIFY attachment_data LONGBLOB NULL,
MODIFY attachment_name VARCHAR(255) NULL,
MODIFY attachment_type VARCHAR(100) NULL,
MODIFY status ENUM('pending', 'in_progress', 'resolved') DEFAULT 'pending',
MODIFY created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
MODIFY updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;


CREATE TABLE therapist_support_messages (
    id INT PRIMARY KEY AUTO_INCREMENT,
    therapist_id VARCHAR(10) NOT NULL,
    email VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    attachment_data LONGBLOB,
    attachment_name VARCHAR(255),
    attachment_type VARCHAR(100),
    status ENUM('pending', 'in_progress', 'resolved') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (therapist_id) REFERENCES therapists(therapist_id) ON DELETE CASCADE
);

CREATE TABLE therapist_applications (
    id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(50) NOT NULL,
    license_number VARCHAR(100) NOT NULL,
    specialization VARCHAR(100) NOT NULL,
    experience TEXT NOT NULL,
    license_file MEDIUMBLOB DEFAULT NULL,
    license_file_type VARCHAR(50) DEFAULT NULL,
    resume MEDIUMBLOB DEFAULT NULL,
    resume_file_type VARCHAR(50) DEFAULT NULL,
    status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
    application_date DATETIME NOT NULL,
    review_date DATETIME DEFAULT NULL,
    review_notes TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- 6. System Tables
CREATE TABLE system_errors (
    id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    error_message TEXT NOT NULL,
    error_context TEXT,
    stack_trace TEXT,
    severity VARCHAR(20) NOT NULL DEFAULT 'ERROR',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP NULL,
    resolution_notes TEXT,
    INDEX idx_severity (severity),
    INDEX idx_created_at (created_at)
);
-- 7. Triggers
DELIMITER //

-- Student Username Generation
CREATE TRIGGER GenerateStudentUsername
BEFORE INSERT ON students
FOR EACH ROW
BEGIN
    DECLARE creation_date CHAR(8);
    DECLARE base_username VARCHAR(150);
    DECLARE existing_count INT;
    SET creation_date = DATE_FORMAT(NEW.created_date, '%Y%m%d');
    SET base_username = CONCAT('space_', LOWER(NEW.lastname), '_', creation_date);
    SELECT COUNT(*) INTO existing_count FROM students WHERE username LIKE CONCAT(base_username, '%');
    SET NEW.username = CONCAT(base_username, existing_count + 1);
END//

-- Therapist ID and Username Generation
CREATE TRIGGER GenerateTherapistIDAndUsername
BEFORE INSERT ON therapists
FOR EACH ROW
BEGIN
    DECLARE count_id INT;
    DECLARE new_id VARCHAR(10);
    SELECT COUNT(*) + 1 INTO count_id FROM therapists;
    SET new_id = CONCAT('THR-', LPAD(count_id, 3, '0'));
    SET NEW.therapist_id = new_id;
    SET NEW.username = CONCAT('space_', new_id);
END//

-- Admin ID Generation
CREATE TRIGGER GenerateAdminID
BEFORE INSERT ON admins
FOR EACH ROW
BEGIN
    DECLARE count_id INT;
    DECLARE new_id VARCHAR(10);
    SELECT COUNT(*) + 1 INTO count_id FROM admins;
    SET new_id = CONCAT('ADM-', LPAD(count_id, 4, '0'));
    SET NEW.admin_id = new_id;
END//

-- Moodlog ID Generation
CREATE TRIGGER GenerateMoodLogID
BEFORE INSERT ON moodlog
FOR EACH ROW
BEGIN
    DECLARE count_id INT;
    DECLARE new_id VARCHAR(10);
    SELECT COUNT(*) + 1 INTO count_id FROM moodlog;
    SET new_id = CONCAT('MOOD-', LPAD(count_id, 4, '0'));
    SET NEW.moodlog_id = new_id;
END//

-- Post Validation Triggers
CREATE TRIGGER check_post_type_insert 
BEFORE INSERT ON posts
FOR EACH ROW
BEGIN
    IF NEW.post_type = 'student' AND NOT EXISTS (
        SELECT 1 FROM students WHERE username = NEW.username
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid student username';
    ELSEIF NEW.post_type = 'therapist' AND NOT EXISTS (
        SELECT 1 FROM therapists WHERE username = NEW.username
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid therapist username';
    END IF;
END//

-- Comment Validation Triggers
CREATE TRIGGER check_commenter_type_insert 
BEFORE INSERT ON comments
FOR EACH ROW
BEGIN
    IF NEW.commenter_type = 'student' AND NOT EXISTS (
        SELECT 1 FROM students WHERE username = NEW.username
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid student username for comment';
    ELSEIF NEW.commenter_type = 'therapist' AND NOT EXISTS (
        SELECT 1 FROM therapists WHERE username = NEW.username
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid therapist username for comment';
    END IF;
END//

-- Like Validation Triggers
CREATE TRIGGER check_liker_type_insert 
BEFORE INSERT ON likes
FOR EACH ROW
BEGIN
    IF NEW.liker_type = 'student' AND NOT EXISTS (
        SELECT 1 FROM students WHERE username = NEW.username
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid student username for like';
    ELSEIF NEW.liker_type = 'therapist' AND NOT EXISTS (
        SELECT 1 FROM therapists WHERE username = NEW.username
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid therapist username for like';
    END IF;
END//

DELIMITER ;

   -- 8. Indexes for Performance
ALTER TABLE posts ADD FULLTEXT INDEX post_content_idx (content);
ALTER TABLE comments ADD FULLTEXT INDEX comment_text_idx (comment_text);
ALTER TABLE journal_entries ADD FULLTEXT INDEX journal_content_idx (content);
ALTER TABLE quotes ADD FULLTEXT INDEX quote_content_idx (content);

-- Add indexes for frequently queried columns
ALTER TABLE posts ADD INDEX created_at_idx (created_at);
ALTER TABLE comments ADD INDEX created_at_idx (created_at);
ALTER TABLE likes ADD INDEX created_at_idx (created_at);
ALTER TABLE activity_logs ADD INDEX created_at_idx (created_at);
ALTER TABLE reports ADD INDEX created_at_idx (created_at);  -- Add this line



-- Add validation trigger for reports
DELIMITER //

CREATE TRIGGER check_report_validity
BEFORE INSERT ON reports
FOR EACH ROW
BEGIN
    -- Check reporter username exists
    IF NEW.reporter_type = 'student' AND NOT EXISTS (
        SELECT 1 FROM students WHERE username = NEW.reporter_username
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid student reporter username';
    ELSEIF NEW.reporter_type = 'therapist' AND NOT EXISTS (
        SELECT 1 FROM therapists WHERE username = NEW.reporter_username
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid therapist reporter username';
    END IF;

    -- Check reported entity exists
    IF NEW.reported_type = 'post' AND NOT EXISTS (
        SELECT 1 FROM posts WHERE post_id = NEW.reported_id
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid post ID';
    ELSEIF NEW.reported_type = 'user' AND NOT EXISTS (
        SELECT 1 FROM students WHERE username = NEW.reported_id
        UNION
        SELECT 1 FROM therapists WHERE username = NEW.reported_id
    ) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid reported username';
    END IF;
END//

DELIMITER ;

CREATE TABLE contacts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    status ENUM('pending', 'read', 'replied') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Drop the existing indexes
ALTER TABLE profile_pictures
DROP INDEX unique_user_picture,
DROP INDEX idx_user,
DROP INDEX idx_status;

-- Add new unique constraint
ALTER TABLE profile_pictures
ADD UNIQUE KEY unique_user_picture (user_id, user_type);


-- Create Superadmin profile
INSERT INTO admins (
    firstname,
    lastname,
    email,
    password,
    contact_number,
    role
) VALUES (
    'Space',
    'Administrator',
    'admin@g.batstate-u.edu.ph',
    -- This is a SHA-256 hash of 'admin123' (for testing only, change in production)
    '240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9',
    '09123456789',
    'superadmin'
);

-- Create Moderator profile
INSERT INTO admins (
    firstname,
    lastname,
    email,
    password,
    contact_number,
    role
) VALUES (
    'Space',
    'Moderator',
    'moderator@g.batstate-u.edu.ph',
    -- This is a SHA-256 hash of 'mod123' (for testing only, change in production)
    '4d56b86787c649ed6dd4168d12c47e35ad638a86ae21455d31783399a3e5d2f4',
    '09987654321',
    'moderator'
);

-- Create Therapist profile
INSERT INTO therapists (
    firstname,
    lastname,
    email,
    password,
    specialization,
    license_number,
    contact_number,
    dob,
    status,
    username
) VALUES (
    'Jennie',
    'Kim',
    'jennie@g.batstate-u.edu.ph',
    -- This is a SHA-256 hash of 'therapist123' (for testing only, change in production)
    '7b5d56f2f5c0901c9ca55266117d81423d63062c21a0d4f95b2489319f2ea09e',
    'Clinical Psychology',
    'LIC-2024-001',
    '09111222333',
    '1990-01-15',
    'active',
    'dr.smith'
);

ALTER TABLE therapist_applications
ADD COLUMN profile_picture mediumblob DEFAULT NULL AFTER resume_file_type,
ADD COLUMN profile_picture_type varchar(50) DEFAULT NULL AFTER profile_picture;

SET GLOBAL max_allowed_packet=268435456; -- Sets it to 256MB

-- First, create tables for replies
CREATE TABLE support_replies (
    reply_id INT PRIMARY KEY AUTO_INCREMENT,
    message_id INT NOT NULL,
    admin_id VARCHAR(10) NOT NULL,  -- Correct type to match admins table
    reply_text TEXT NOT NULL,
    attachment_name VARCHAR(255),
    attachment_type VARCHAR(100),
    attachment_data LONGBLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX (message_id),
    INDEX (admin_id),
    FOREIGN KEY (message_id) REFERENCES support_messages(id) ON DELETE CASCADE,
    FOREIGN KEY (admin_id) REFERENCES admins(admin_id)
) ENGINE=InnoDB;

CREATE TABLE therapist_support_replies (
    reply_id INT PRIMARY KEY AUTO_INCREMENT,
    message_id INT NOT NULL,
    admin_id VARCHAR(10) NOT NULL,  -- Correct type to match admins table
    reply_text TEXT NOT NULL,
    attachment_name VARCHAR(255),
    attachment_type VARCHAR(100),
    attachment_data LONGBLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX (message_id),
    INDEX (admin_id),
    FOREIGN KEY (message_id) REFERENCES therapist_support_messages(id) ON DELETE CASCADE,
    FOREIGN KEY (admin_id) REFERENCES admins(admin_id)
) ENGINE=InnoDB;

-- Add reply count columns
ALTER TABLE support_messages 
ADD COLUMN IF NOT EXISTS reply_count INT DEFAULT 0;

ALTER TABLE therapist_support_messages 
ADD COLUMN IF NOT EXISTS reply_count INT DEFAULT 0;

-- Create triggers for reply counting
DELIMITER //

CREATE TRIGGER after_support_reply_insert
AFTER INSERT ON support_replies
FOR EACH ROW
BEGIN
    UPDATE support_messages 
    SET reply_count = reply_count + 1 
    WHERE id = NEW.message_id;
END//

CREATE TRIGGER after_therapist_reply_insert
AFTER INSERT ON therapist_support_replies
FOR EACH ROW
BEGIN
    UPDATE therapist_support_messages 
    SET reply_count = reply_count + 1 
    WHERE id = NEW.message_id;
END//

DELIMITER ;

-- For support_messages table (student messages)
ALTER TABLE support_messages 
MODIFY COLUMN status ENUM('pending', 'in_progress', 'resolved', 'archived') DEFAULT 'pending';

-- For therapist_support_messages table
ALTER TABLE therapist_support_messages 
MODIFY COLUMN status ENUM('pending', 'in_progress', 'resolved', 'archived') DEFAULT 'pending';

CREATE TABLE IF NOT EXISTS reminder_settings (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id VARCHAR(50),
    reminder_time TIME DEFAULT '17:00:00',
    is_enabled BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE therapy_sessions (
    session_id INT PRIMARY KEY AUTO_INCREMENT,
    srcode INT NOT NULL,
    therapist_id VARCHAR(10) NOT NULL,
    session_date DATE NOT NULL,
    session_time TIME NOT NULL,
    session_type ENUM('online', 'face-to-face') NOT NULL,
    status ENUM('pending', 'confirmed', 'completed', 'cancelled') DEFAULT 'pending',
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (srcode) REFERENCES students(srcode),
    FOREIGN KEY (therapist_id) REFERENCES therapists(therapist_id),
    INDEX (session_date),
    INDEX (status)
) ENGINE=InnoDB;


CREATE TABLE video_therapy_sessions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    therapy_session_id INT,
    meeting_id VARCHAR(255) NOT NULL,
    channel_name VARCHAR(255) NOT NULL,
    therapist_id VARCHAR(10) NOT NULL,
    srcode INT NOT NULL,
    start_time DATETIME NOT NULL,
    end_time DATETIME,
    duration INT,
    status ENUM('scheduled', 'ongoing', 'completed', 'cancelled') DEFAULT 'scheduled',
    recording_url TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (therapy_session_id) REFERENCES therapy_sessions(session_id),
    FOREIGN KEY (therapist_id) REFERENCES therapists(therapist_id),
    FOREIGN KEY (srcode) REFERENCES students(srcode)
);

CREATE TABLE sms_logs (
    id INT PRIMARY KEY AUTO_INCREMENT,
    booking_id INT,
    recipient_number VARCHAR(20),
    message_text TEXT,
    message_type ENUM('pending', 'confirmed', 'cancelled', 'rejected'),
    message_id VARCHAR(100),  -- From Infobip response
    status VARCHAR(50),
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    error_message TEXT NULL,
    FOREIGN KEY (booking_id) REFERENCES therapy_sessions(id)
);

CREATE TABLE status_notifications (
    id INT PRIMARY KEY AUTO_INCREMENT,
    session_id INT NOT NULL,
    old_status VARCHAR(20),
    new_status VARCHAR(20),
    processed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (session_id) REFERENCES therapy_sessions(session_id)
) ENGINE=InnoDB;
DELIMITER //

CREATE TRIGGER after_therapy_session_update 
AFTER UPDATE ON therapy_sessions
FOR EACH ROW 
BEGIN
    -- Only trigger for confirmed or cancelled status changes
    IF OLD.status != NEW.status AND (NEW.status = 'confirmed' OR NEW.status = 'cancelled') THEN
        INSERT INTO status_notifications 
            (session_id, old_status, new_status)
        VALUES 
            (NEW.session_id, OLD.status, NEW.status);
    END IF;
END//

DELIMITER ;


DELIMITER //

DROP TRIGGER IF EXISTS after_therapy_session_update//

CREATE TRIGGER after_therapy_session_update 
AFTER UPDATE ON therapy_sessions
FOR EACH ROW 
BEGIN
    -- Only trigger for confirmed or cancelled status changes
    IF OLD.status != NEW.status AND (NEW.status = 'confirmed' OR NEW.status = 'cancelled') THEN
        INSERT INTO status_notifications 
            (session_id, old_status, new_status)
        VALUES 
            (NEW.session_id, OLD.status, NEW.status);
    END IF;
END//

DELIMITER ;

CREATE TABLE session_feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT,
    session_id INT NOT NULL,
    diagnosis TEXT,
    recommendations TEXT,
    follow_up ENUM('yes', 'no') DEFAULT 'no',
    follow_up_notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (session_id) REFERENCES therapy_sessions(session_id)
);

CREATE TABLE student_feedback (
    feedback_id INT PRIMARY KEY AUTO_INCREMENT,
    session_id INT NOT NULL,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (session_id) REFERENCES therapy_sessions(session_id),
    UNIQUE KEY unique_session_feedback (session_id)
);

-- Self-care modules table
CREATE TABLE self_care_modules (
    module_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    category ENUM('Meditation', 'Exercise', 'Mindfulness', 'Stress Management', 'Sleep', 'Other') NOT NULL,
    difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced') DEFAULT 'Beginner',
    estimated_duration VARCHAR(50), -- e.g., "15 minutes", "1 hour"
    thumbnail MEDIUMBLOB,
    thumbnail_type VARCHAR(50),
    content_file MEDIUMBLOB,
    content_file_type VARCHAR(50),
    status ENUM('active', 'inactive', 'archived') DEFAULT 'active',
    created_by VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_category (category),
    INDEX idx_status (status),
    INDEX idx_created_at (created_at)
);


CREATE TABLE IF NOT EXISTS password_resets (
    id INT PRIMARY KEY AUTO_INCREMENT,
    email VARCHAR(255) NOT NULL,
    token VARCHAR(6) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    used BOOLEAN DEFAULT FALSE,
    INDEX (email, token)
);

INSERT INTO password_resets (email, token, expires_at) 
VALUES (?, ?, DATE_ADD(NOW(), INTERVAL 30 MINUTE))


CREATE TABLE email_verifications (
    id INT PRIMARY KEY AUTO_INCREMENT,
    email VARCHAR(255) NOT NULL,
    verification_code VARCHAR(6) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at DATETIME NOT NULL,
    is_verified BOOLEAN DEFAULT FALSE
);

-- Add new columns
ALTER TABLE students
ADD COLUMN deleted_at TIMESTAMP NULL DEFAULT NULL,
ADD COLUMN delete_reason ENUM('privacy', 'not_useful', 'other') NULL,
ADD COLUMN delete_details TEXT NULL;

-- Modify status ENUM to include 'deleted'
ALTER TABLE students
MODIFY COLUMN status ENUM('active', 'deactivated', 'suspended', 'deleted') DEFAULT 'active';

CREATE TABLE login_attempts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    attempt_time DATETIME NOT NULL,
    ip_address VARCHAR(45) NOT NULL
);